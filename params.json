{"name":"Forms.js","tagline":"A JavaScript library for working with forms","body":"Working with web forms can be tedious and time consuming. Many of the tools that exist today require individual setup and handling for each form element. Furthermore, the current set of tools can be rigid and limiting in their functionality.\r\n\r\nFormsJs hopes to solve a few of these challenges. A lightweight, javascript library, FormsJs allows you to work on an entire form at once. Using a simple configuration file, you can populate a form with default values, check all validations, gather a list of error messages, and serialize all the data to be passed to the server. This configuration file also makes it simple to change functionality as your form evolves over time.\r\n\r\n### Basic Configuration\r\n\r\nThe configuration file is a JavaScript file that contains an array of objects. Each object represents a form element. Here’s the setup for an email address field:\r\n\r\n```javascript\r\nvar config = [\r\n  {\r\n    type: \"text\",\r\n    name: \"email\",\r\n    validations: [\r\n      {\r\n        type: \"required\",\r\n        errorMessage: \"Email address is required\"\r\n      },\r\n      {\r\n        type: \"email\",\r\n        errorMessage: \"Please enter a valid email address\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\nEach setup object requires a type (as strings). Currently, FormsJs supports the following types: ‘text’, ‘radio’, ‘checkbox’, and ‘select’.\r\n\r\nThe name attribute is also required and must correspond to the name attribute of the HTML form element. We hope to break this dependency in future versions to allow for more customization (say if you wanted to use a data-id) as well as allow a form to contain fields with the same name.\r\n\r\nValidations are done with another array of objects, allowing you to have more than one validator for each field (as shown above). Each validation object requires a type and an error message. Additional data is used depending on the type of validation.\r\n\r\nCurrently, FormsJs supports the following validations: required, email address, min length, max length, matching input between two fields, custom regular expression, or a custom validation function.\r\n\r\n### Validation and Errors\r\n\r\nNow that we have our config file setup, we can use it to validate our email address field. After adding FormsJs to your HTML form, you can work with it to validate and gather errors. To start, create a new form object and pass in your config:\r\n\r\n```javascript\r\nform = new FormsJs.Form(config)\r\n```\r\n\r\nOnce initialized, you can call `form.isValid()` to validate the entire form at once. This will return true or false.\r\n\r\nIf your form is invalid, you can call `form.errors()` to get an object with the element name and a list of error messages. If our email address was left blank, this would return:\r\n\r\n```javascript\r\nform.errors() => { email : [ \"Email address is required\" ] }\r\n```\r\n\r\nIf you called `.errors()` on a valid form, it would simply return an empty object { }.\r\n\r\n### Pre-population\r\n\r\nIn addition to validation and errors, our config can also specify default values for use in population. We specify a default with the value keyword:\r\n\r\n```javascript\r\nvar config = [\r\n  {\r\n    type: \"text\",\r\n    name: \"email\",\r\n    value: \"me@example.com\",\r\n  }\r\n]\r\n```\r\n\r\nThis is useful if you need to autofill information from a returning user or specify default values. You can use the populate function by calling `.populate()` on your form object.\r\n\r\n### Serialization\r\n\r\nAfter you have a complete, valid form, you need to serialize the data to be passed to the server. With FormsJs, you simply call `.serialize()` on your form object. This returns an object with each element’s name as a key, and it’s submitted value as a value.\r\n\r\n```javascript\r\nform.serialize() => { email : \"me@example.com\" }\r\n```\r\n\r\nSerialization currently defaults to the name attribute of an element but we hope to add greater flexibility in the future.\r\n\r\n### Custom Validators\r\n\r\nIn addition to the built in validators, we also allow a custom validator. This validator requires a third parameter - a callback function that takes a value to be matched against and returns true or false.\r\n\r\n```javascript\r\nvalidations: [\r\n  {\r\n    type : \"customMatcher\",\r\n    errorMessage : \"Phone type is required when a phone number is entered\",\r\n    matcher : function(value) {\r\n                  otherField = $(\"[name=phone]\").val();\r\n                    if (otherField === \"\") {\r\n                      return true;\r\n                    } else if (value !== \"\") {\r\n                      return true;\r\n                    } else {\r\n                      return false;\r\n                    }\r\n  }\r\n]\r\n```\r\n\r\nBecause FormsJs requires jQuery and Underscore, their functions are available within your custom matcher.\r\n\r\nHopefully you can see the value that FormsJs brings to web forms. For more information and a complete sample config file, check out the README on the project’s home page.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}